#!/usr/bin/env bash

set -e
. /etc/ykfde.conf

if [ "$(id -u)" -ne 0 ]; then
  echo "Root required for this operation." 1>&2
  exit 1
fi

while getopts ":s:d:hcv" opt; do
  case $opt in
	s)
		KEY_SLOT="$OPTARG"
		printf '%s\n' "INFO: Setting LUKS key slot to \"$OPTARG\"."
		;;
	d)
		YKFDE_LUKS_DEV="$OPTARG"
		printf '%s\n' "INFO: Setting disk to \"$OPTARG\"."
		;;
	c)	CLEAR_KEY_SLOT=1
		echo "INFO: clearing LUKS key slot"
		;;
	v)	DBG=1
		echo "INFO: Debugging enabled"
		;;
	h)
		echo 
		echo " -d <partition>: set the partition"
		echo " -s <slot>     : set the slot"
		echo " -c            : clear the slot prior to writing"
		echo " -v            : show input/output in cleartext"
		echo
		exit 1
		;;
	\?)
		printf '%s\n' "Invalid option: \"-$OPTARG\"" >&2
		;;
  esac
done

if [ -z "$YKFDE_LUKS_DEV" ]; then
    echo "Please select an existing partition using -d option, see ykfde-enroll -h for help."
    exit 1
fi

if [ -z "$KEY_SLOT" ]; then
    echo "Please select LUKS key slot using -s option, see ykfde-enroll -h for help."
    exit 1
fi

if [ -n "$CLEAR_KEY_SLOT" ]; then
	printf '%s\n' "Killing LUKS slot $KEY_SLOT"
	cryptsetup luksKillSlot "$YKFDE_LUKS_DEV" "$KEY_SLOT"
fi

printf '%s\n' "This script will utilize slot \"$KEY_SLOT\" on drive \"$YKFDE_LUKS_DEV\".  If this is not what you intended, please abort."

if [ -n "$YKFDE_CHALLENGE_PASSWORD_NEEDED" ]; then
    echo " > Please provide the challenge password."
    while [ -z "$_pw" ]; do
    printf "   Enter password: "; if [ "$DBG" ]; then read -r _pw; else read -r -s _pw; fi
    printf "\\n > Please repeat the password.\\n"
    printf "   Enter password: "; if [ "$DBG" ]; then read -r _pw2; else read -r -s _pw2; fi
    if [ "$_pw" != "$_pw2" ]; then
	echo "Passwords do not match."
	exit 1
    fi
    _pw=$(printf %s "$_pw" | sha256sum | awk '{print $1}')
    done
    [ "$DBG" ] || echo # if /NOT/ DBG, we need to output \n here.
    YKFDE_CHALLENGE="$_pw"
fi

[ "$DBG" ] && printf %s "   ykinfo -$YKFDE_CHALLENGE_SLOT \"$YKFDE_CHALLENGE\": "
_tmp="$(ykinfo -"$YKFDE_CHALLENGE_SLOT" 2>&1)";
[ "$DBG" ] && printf '%s\n' "$_tmp"

echo "   Remember to touch the device if necessary."
[ "$DBG" ] && printf '%s\n' "   Running: ykchalresp -$YKFDE_CHALLENGE_SLOT \"$YKFDE_CHALLENGE\"..."
_passphrase="$(ykchalresp -"$YKFDE_CHALLENGE_SLOT" "$YKFDE_CHALLENGE" 2>/dev/null| tr -d '\n')"

if [ -z "$_passphrase" ]; then
    echo "   YubiKey did not provide a response - Initializing second attempt, touch the device if necessary."
    _passphrase="$(ykchalresp -"$YKFDE_CHALLENGE_SLOT" "$YKFDE_CHALLENGE" 2>/dev/null| tr -d '\n')"
fi

[ "$DBG" ] && printf '%s\n' "   Received response: '$_passphrase'"

if [ -n "$_passphrase" ] && [ -n "$YKFDE_CHALLENGE_PASSWORD_NEEDED" ]; then
    _passphrase="$_pw$_passphrase"
fi

[ "$DBG" ] && printf '%s\n' " > Using '$_passphrase' with cryptsetup!"
echo "If prompted for a passphrase, enter the current passphrase for the LUKS container. This is the old LUKS passphrase."
printf " Enter password: "; if [ "$DBG" ]; then read -r OLD; else read -r -s OLD; fi

if [ -n "$_passphrase" ]; then
    [ "$DBG" ] && echo " > Adding new LUKS key (cryptsetup --key-slot=\"$KEY_SLOT\" luksAddKey \"$YKFDE_LUKS_DEV\")..." || printf "\\n > Decrypting (cryptsetup luksAddKey)...\\n"
    printf '%s\n' "$OLD" "$_passphrase" "$_passphrase" | cryptsetup --key-slot="$KEY_SLOT" luksAddKey "$YKFDE_LUKS_DEV" 2>&1;
else
    echo "   Passphrase is empty. Operation aborted."
    exit 1
fi

exit 0
