#!/usr/bin/env bash

set -e
. /etc/ykfde.conf

while getopts ":d:n:hvp" opt; do
  case $opt in
	d)
		YKFDE_LUKS_DEV=$OPTARG
		echo "setting disk to $OPTARG."
		;;
	n)
		YKFDE_LUKS_NAME=$OPTARG
		echo "setting name to $OPTARG."
		;;
	v)	DBG=1
		echo "debugging enabled"
		;;
	p)  YKFDE_PRINT_ONLY=1
		echo "showing complied cleartext passphrase without unlocking"
		;;
	h)
		echo 
		echo " -d <partition>: select existing partition"
		echo " -n <name>     : set the new container name"
		echo " -v            : show input/output in cleartext"
		echo " -p            : show cleartext passphrase without unlocking"
		echo
		exit 1
		;;
	\?)
		echo "Invalid option: -$OPTARG" >&2
		;;
  esac
done

if [ -z "$YKFDE_PRINT_ONLY" ] ; then
	if [ -z "$YKFDE_LUKS_DEV" ]; then
		echo "Please select existing partition using -d option, see ykfde-open -h for help."
		exit 1
	fi

	echo "This script will try opening $YKFDE_LUKS_NAME LUKS container on drive $YKFDE_LUKS_DEV . If this is not what you intended, exit now!"
fi


if [ "$YKFDE_CHALLENGE_PASSWORD_NEEDED" = "1" ]; then
    echo " > Please provide password which will be used as challenge."
    while [ -z "$_pw" ]; do
    printf "   Enter password: "; if [ "$DBG" ]; then read -r _pw; else read -r -s _pw; fi
    _pw=$(printf %s "$_pw" | sha256sum | awk '{print $1}')
    done
    [ "$DBG" ] || echo # if /NOT/ DBG, we need to output \n here.
    YKFDE_CHALLENGE="$_pw"
fi

[ "$DBG" ] && printf "   ykinfo -$YKFDE_CHALLENGE_SLOT \"$YKFDE_CHALLENGE\": "
_tmp="$(ykinfo -"$YKFDE_CHALLENGE_SLOT" 2>&1)";
[ "$DBG" ] && echo "$_tmp"

echo "   Don't forget to press its button if necessary..."
[ "$DBG" ] && echo "   Running NOW: ykchalresp -$YKFDE_CHALLENGE_SLOT \"$YKFDE_CHALLENGE\"..."
_passphrase="$(ykchalresp -"$YKFDE_CHALLENGE_SLOT" "$YKFDE_CHALLENGE" 2>/dev/null| tr -d '\n')"

if [ -z "$_passphrase" ]; then
    printf "\n   NO response from YubiKey!? - We try again! (so press the button now?!)...\n"
    _passphrase="$(ykchalresp -"$YKFDE_CHALLENGE_SLOT" "$YKFDE_CHALLENGE" 2>/dev/null| tr -d '\n')"
fi

[ "$DBG" ] && printf "\n   Got as response: '$_passphrase'\n"

if [ -n "$_passphrase" ] && [ "$YKFDE_CHALLENGE_PASSWORD_NEEDED" = "1" ]; then
    _passphrase="$_pw$_passphrase"
fi

if [ -n "$YKFDE_PRINT_ONLY" ] ; then
	echo " > Passphrase: $_passphrase"
	exit 0
fi

[ "$DBG" ] && echo " > Using '$_passphrase' with cryptsetup!"
[ "$DBG" ] && echo " > Decrypting (cryptsetup luksOpen \"$YKFDE_LUKS_DEV\" \"$YKFDE_LUKS_NAME\")..." || echo " > Decrypting (cryptsetup luksOpen)..."

if [ "$(id -u)" -eq 0 ]; then
  printf %s "$_passphrase"| cryptsetup luksOpen "$YKFDE_LUKS_DEV" "$YKFDE_LUKS_NAME" 2>&1;
else
  expect <(cat <<EXPECTSCRIPT
    set timeout -1
    spawn udisksctl unlock -b "$YKFDE_LUKS_DEV"
    match_max 100000
    expect -exact "Passphrase: "
    send -- "${_passphrase}\\r"
    expect eof
EXPECTSCRIPT
)

fi

exit 0
