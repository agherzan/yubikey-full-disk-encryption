#!/bin/sh
# shellcheck shell=dash

# set default values:
DBG=""
YKFDE_CONFIG_FILE="/etc/ykfde.conf"
YKFDE_CHALLENGE_YUBIKEY_INSERT_TIMEOUT="30"
YKFDE_CRYPTSETUP_TRIALS="5"
YKFDE_CHALLENGE_SLOT="2"
YKFDE_CHALLENGE=""
YKFDE_CHALLENGE_PASSWORD_NEEDED=""
YKFDE_USE_PLYMOUTH=""

message() {
  if [ "$YKFDE_USE_PLYMOUTH" ]; then
    plymouth display-message --text="$*"
  else
    echo "$@" >&2
  fi
  return 0
}

run_hook() {
  local _tmp
  _tmp=""

  [ -x /bin/plymouth ] && [ "$splash" ] && plymouth --ping && YKFDE_USE_PLYMOUTH=1

  # shellcheck source=../ykfde.conf
  . "$YKFDE_CONFIG_FILE" || {
    ykfde_err 001 "Failed to read the YKFDE configuration file '$YKFDE_CONFIG_FILE'"
    return 1
  }
  
  [ "$DBG" ] && message "$0:"
  [ "$DBG" ] && message " > Successfully read YKFDE configuration file."
  
  # sanity checks:
  [ "$YKFDE_CRYPTSETUP_TRIALS" -lt 1 ] && YKFDE_CRYPTSETUP_TRIALS="5"
  [ "$YKFDE_CHALLENGE_SLOT" -lt 1 ] || [ "$YKFDE_CHALLENGE_SLOT" -gt 2 ] && YKFDE_CHALLENGE_SLOT="2"

  local trial_nr
  trial_nr=1
  while [ "$trial_nr" -le "$YKFDE_CRYPTSETUP_TRIALS" ]; do
    ykfde_do_it && return 0
    trial_nr=$((trial_nr + 1))
  done

  # if we get here, we did NOT succeed:
  ykfde_err 000 "$0 Failed!"
  return 1
}

ykfde_err() {
  local _rc
  _rc="$?"
  local code
  code="$1"
  local msg
  msg="$2"
  [ "$msg" ] && msg="ERROR $code [rc=$_rc]: $msg" || msg="ERROR $code [rc=$_rc]"
  message "$msg" #exit 1;
}

# assemble passphrase and run 'cryptsetup luksOpen'
ykfde_do_it() {
  # key used to 'cryptsetup luksOpen'
  local _ykfde_passphrase
  _ykfde_passphrase=""
  local _tmp
  _tmp=""
  local _rc
  _rc=""

  # if we have a challenge
  [ "$YKFDE_CHALLENGE" ] || [ "$YKFDE_CHALLENGE_PASSWORD_NEEDED" ] && ykfde_challenge_response

  if [ -z "$_ykfde_passphrase" ]; then
    if [ "$YKFDE_CHALLENGE" ] || [ "$YKFDE_CHALLENGE_PASSWORD_NEEDED" ]; then
      message " > Challenge-Response failed. Falling back to manual passphrase."
      [ "$trial_nr" -le "$YKFDE_CRYPTSETUP_TRIALS" ] && message "   Press ENTER to skip and retry Challenge-Response."
    fi

    if [ "$YKFDE_USE_PLYMOUTH" ]; then
      printf '%s' "$(plymouth ask-for-password --prompt="Enter passphrase" --dont-pause-progress)"
    else
      # shellcheck disable=SC2169
      printf '%s' "$(/lib/cryptsetup/askpass "   Enter passphrase: ")"
    fi
    exit 0
  fi
}

ykfde_challenge_response() {
  local _yubikey_timeout
  _yubikey_timeout="$YKFDE_CHALLENGE_YUBIKEY_INSERT_TIMEOUT"
  local _yubikey_timeout_str
  _yubikey_timeout_str=""
  local _yubikey_detected
  _yubikey_detected=""
  local _yubikey_nfc_detected
  _yubikey_nfc_detected=""
  local _ykfde_response
  _ykfde_response=""
  # to determine if a timeout occurred
  local _starttime
  _starttime=""
  local _endtime
  _endtime=""
  local _usedtime
  _usedtime=""
  local _tmp
  _tmp=""
  local _rc
  _rc=""

  [ "$YKFDE_CHALLENGE_YUBIKEY_INSERT_TIMEOUT" -gt 0 ] && _yubikey_timeout_str="$YKFDE_CHALLENGE_YUBIKEY_INSERT_TIMEOUT seconds"

  _starttime="$(date +%s)"
  message " > Waiting $_yubikey_timeout_str for YubiKey..."

  while [ -z "$_yubikey_detected" ] && [ -z "$_yubikey_nfc_detected" ]; do
    _endtime="$(date +%s)"
    _usedtime=$((_endtime - _starttime))
    [ "$DBG" ] && message "   (used time:$_usedtime, timeout:$_yubikey_timeout) 'ykinfo -$YKFDE_CHALLENGE_SLOT': "
    _tmp="$(ykinfo -"$YKFDE_CHALLENGE_SLOT" 2>&1)"
    _rc=$?
    [ "$DBG" ] && message "[$_rc] '$_tmp'"
    if [ "$_rc" -eq 0 ]; then
      _yubikey_detected=1
    fi
    if [ "$_yubikey_timeout" -eq -1 ] || [ "$_usedtime" -le "$_yubikey_timeout" ]; then
      sleep 0.5
    else
      message "    Timeout - Challenge-Response aborted."
      # timeout
      return 1
    fi
  done

  [ "$YKFDE_CHALLENGE_PASSWORD_NEEDED" ] && YKFDE_CHALLENGE=""
  while [ -z "$YKFDE_CHALLENGE" ]; do
    # shellcheck disable=SC2169
    if [ "$YKFDE_USE_PLYMOUTH" ]; then
      YKFDE_CHALLENGE="$(plymouth ask-for-password --prompt="Enter challenge" --dont-pause-progress)"
    else
      YKFDE_CHALLENGE="$(/lib/cryptsetup/askpass "   Enter challenge: ")"
    fi
  done

  if [ "$_yubikey_detected" ]; then
    while [ -z "$_ykfde_response" ]; do
      [ "$DBG" ] && message "   Running: 'ykchalresp -$YKFDE_CHALLENGE_SLOT $YKFDE_CHALLENGE'..."
      message "   Remember to touch the device if necessary."
      YKFDE_CHALLENGE="$(printf %s "$YKFDE_CHALLENGE" | sha256sum | awk '{print $1}')"
      _ykfde_response="$(printf %s "$YKFDE_CHALLENGE" | ykchalresp -"$YKFDE_CHALLENGE_SLOT" -i- | tr -d '\n')"
      [ "$DBG" ] && message "   Received response: '$_ykfde_response'"
    done
  fi

  if [ "$_ykfde_response" ]; then
    if [ "$YKFDE_CHALLENGE_PASSWORD_NEEDED" ]; then
      printf '%s' "$YKFDE_CHALLENGE$_ykfde_response"
    else
      printf '%s' "$_ykfde_response"
    fi
    exit 0
  fi
}

run_hook

exit 0
