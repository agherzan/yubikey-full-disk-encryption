#!/usr/bin/ash

YKFDE_CONFIG_FILE="/etc/ykfde.conf"

DEFAULT_CRYPTSETUP_TRIALS=5;                   # defaults number of times to try 'do_it()' -- so: assemble passphrase and run 'cryptsetup luksOpen'
DEFAULT_CHALLENGE_YUBIKEY_INSERT_TIMEOUT=30;   # default value for YKFDE_CHALLENGE_YUBIKEY_INSERT_TIMEOUT. -1 = unlimited


ykfde_err() { local rc="$?"; local code="$1"; local msg="$2";
  [ -n "$msg" ] && msg="\\nERROR $code [rc=$rc]: $msg\\n" || msg="\\nERROR $code [rc=$rc]";
  printf %s "$msg"; #exit 1;
}

ykfde_challenge_response() {
    local _yubikey_timeout="$YKFDE_CHALLENGE_YUBIKEY_INSERT_TIMEOUT"
    local _yubikey_timeout_str=""
    local _yubikey_detected=""
    local _starttime=""               # to determine if a timeout occured
    local _endtime=""
    local _usedtime=""
    local _tmp="";
    local _rc="";

    [ "$YKFDE_CHALLENGE_YUBIKEY_INSERT_TIMEOUT" -gt 0 ] && _yubikey_timeout_str="$YKFDE_CHALLENGE_YUBIKEY_INSERT_TIMEOUT seconds"

    _starttime=$(date +%s)
    echo " > Waiting $_yubikey_timeout_str for YubiKey..."

    while [ -z "$_yubikey_detected" ]; do
        _endtime=$(date +%s)
        _usedtime=$(( _endtime - _starttime ))
        [ "$DBG" ] && printf %s "   (used time:$_usedtime, timeout:$_yubikey_timeout) ykinfo -$YKFDE_CHALLENGE_SLOT \"$YKFDE_CHALLENGE\": "
        _tmp="$(ykinfo -"$YKFDE_CHALLENGE_SLOT" 2>&1)"; _rc=$?;
        [ "$DBG" ] && echo "[$_rc] '$_tmp'"
        [ $_rc -eq 0 ] && _yubikey_detected=1;
        if [ "$_yubikey_timeout" -eq -1 ] || [ $_usedtime -le "$_yubikey_timeout" ]; then
            sleep 0.5
        else
            echo "    Timeout - Challenge-Response aborted."
            return 1 # timeout
        fi
    done

    if [ -n "$YKFDE_CHALLENGE_PASSWORD_NEEDED" ]; then
        local _pw="";
        echo " > Please provide the challenge password."
        while [ -z "$_pw" ]; do
            printf "   Enter password: "; if [ "$DBG" ]; then read -r _pw; else read -r -s _pw; fi
            _pw=$(printf %s "$_pw" | sha256sum | awk '{print $1}')
        done
        [ "$DBG" ] || echo # if /NOT/ DBG, we need to output \n here.
        YKFDE_CHALLENGE="$_pw"
    fi

    echo "   Remember to touch the device if necessary."
    [ "$DBG" ] && echo "   Running: ykchalresp -$YKFDE_CHALLENGE_SLOT \"$YKFDE_CHALLENGE\"..."
    _passphrase="$(ykchalresp -"$YKFDE_CHALLENGE_SLOT" "$YKFDE_CHALLENGE" 2>/dev/null| tr -d '\n')"
    if [ -z "$_passphrase" ]; then
      printf "\\n   YubiKey did not provide a response - Initializing second attempt, touch the device if necessary.\\n"
      _passphrase="$(ykchalresp -"$YKFDE_CHALLENGE_SLOT" "$YKFDE_CHALLENGE" 2>/dev/null| tr -d '\n')"
    fi
    if [ -z "$_passphrase" ]; then
      printf "\\n   YubiKey did not provide a response - Initializing final attempt, touch the device if necessary.\\n"
      _passphrase="$(ykchalresp -"$YKFDE_CHALLENGE_SLOT" "$YKFDE_CHALLENGE" 2>/dev/null| tr -d '\n')"
    fi
    [ "$DBG" ] && printf '%s\n' "   Received response: '$_passphrase'"

    if [ -n "$_passphrase" ] && [ -n "$YKFDE_CHALLENGE_PASSWORD_NEEDED" ]; then
      _passphrase="$_pw$_passphrase"
    fi
}


# assemble passphrase and run 'cryptsetup luksOpen'
ykfde_do_it() {
    local _passphrase=""                     # key used to 'cryptsetup luksOpen'
    local _tmp="";
    local _rc="";

    # if we have a challenge
    [ -n "$YKFDE_CHALLENGE" ] && ykfde_challenge_response

    if [ -z "$_passphrase" ]; then
        if [ -n "$YKFDE_CHALLENGE" ]; then
          printf " > Challenge-response failed.\\n   Falling back to manual passphrase.\\n"
          [ "$trial_nr" -le "$YKFDE_CRYPTSETUP_TRIALS" ] && echo "   Press ENTER to skip and retry Challenge-Response."
        else
          echo " > Passphrase needed to unlock disk."
        fi

        printf "   Enter passphrase: "; if [ "$DBG" ]; then read -r _passphrase; else read -r -s _passphrase; fi
        [ "$DBG" ] || echo # if /NOT/ DBG, we need to output \n here.
    fi

    [ -e "$YKFDE_LUKS_DEV" ] || { ykfde_err 003 "YKFDE cannot find LUKS device '$YKFDE_LUKS_DEV'.\\nPlease check YKFDE_DISK_UUID ($YKFDE_DISK_UUID) and/or YKFDE_LUKS_DEV variable(s) in '$YKFDE_CONFIG_FILE'."; return 1; }

    [ "$DBG" ] && echo " > Passing '$_passphrase' to cryptsetup!"
    if [ -n "$RESUME" ]; then
        [ "$DBG" ] && echo " > Decrypting (cryptsetup luksResume \"$cryptname\"..." || echo " > Decrypting (cryptsetup luksResume)..."
        _tmp="$(printf %s "$_passphrase"| cryptsetup luksResume "${cryptname}" 2>&1;)";
    else
        [ "$DBG" ] && echo " > Decrypting (cryptsetup luksOpen \"$YKFDE_LUKS_DEV\" \"$YKFDE_LUKS_NAME\")..." || echo " > Decrypting (cryptsetup luksOpen)..."
        _tmp="$(printf %s "$_passphrase"| cryptsetup luksOpen "$YKFDE_LUKS_DEV" "$YKFDE_LUKS_NAME" 2>&1)";
    fi
    _rc=$?;

    if [ $_rc -eq 0 ]; then
        echo "   Decryption was succesful.";
        if [ -n "$YKFDE_SLEEP_AFTER_SUCCESSFUL_CRYPTSETUP" ] && [ "$YKFDE_SLEEP_AFTER_SUCCESSFUL_CRYPTSETUP" -gt 0 ]; then
          [ "$DBG" ] && echo " > Making $YKFDE_SLEEP_AFTER_SUCCESSFUL_CRYPTSETUP sleep."
          sleep "$YKFDE_SLEEP_AFTER_SUCCESSFUL_CRYPTSETUP"
        fi;
    else
        echo "   FAILED! [$_rc] $_tmp";
    fi

    return $_rc;
}


run_hook() {
    local _tmp=""

    [ "$DBG" ] && echo "$0:"

    [ "$DBG" ] && echo " > Reading YKFDE configuration file."
    . "$YKFDE_CONFIG_FILE" || { ykfde_err 001 "Failed to read the YKFDE configuration file '$YKFDE_CONFIG_FILE'"; return 1; }

    [ -z "$YKFDE_DISK_UUID" ] || [ -z "$YKFDE_LUKS_NAME" ] && { ykfde_err 002 "'$YKFDE_CONFIG_FILE' Please provide YKFDE_DISK_UUID /and/ YKFDE_LUKS_NAME."; return 1; }

    # set default values:
    [ -z "$YKFDE_LUKS_DEV" ] && YKFDE_LUKS_DEV="/dev/disk/by-uuid/$YKFDE_DISK_UUID"
    [ -z "$YKFDE_CHALLENGE_YUBIKEY_INSERT_TIMEOUT" ] && YKFDE_CHALLENGE_YUBIKEY_INSERT_TIMEOUT="$DEFAULT_CHALLENGE_YUBIKEY_INSERT_TIMEOUT"
    [ -z "$YKFDE_CRYPTSETUP_TRIALS" ] && YKFDE_CRYPTSETUP_TRIALS="$DEFAULT_CRYPTSETUP_TRIALS"

    # sanity checks:
    [ $YKFDE_CRYPTSETUP_TRIALS -gt 0 ] || { ykfde_err 004 "YKFDE_CRYPTSETUP_TRIALS needs to be higher than 0."; return 1; }

    [ "$DBG" ] && echo " > modprobing dm-crypt"
    _tmp="$(modprobe -a -q dm-crypt >/dev/null 2>&1)"

    local trial_nr=1;
    local what="$YKFDE_DISK_UUID"; [ -n "$YKFDE_LUKS_NAME" ] && s=" $YKFDE_LUKS_NAME";
    while [ $trial_nr -le $YKFDE_CRYPTSETUP_TRIALS ]; do
      printf '%s\n' "Attempt #$trial_nr/$YKFDE_CRYPTSETUP_TRIALS: cryptsetup of $what"
      ykfde_do_it && return 0;
      trial_nr=$(( trial_nr + 1 ));
    done

    # if we get here, we did NOT succeed:
    ykfde_err 000 "$0 Failed!"
    return 1;
}

